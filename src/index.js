import dotenv from 'dotenv';
import { Telegraf } from 'telegraf';
import pino from 'pino';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { buildMProxyFromEnv } from './mproxyClient.js';
import { startMProxyServer } from './mproxy-server.js';
import { pickUniqueRandom } from './giveaway.js';
import { randomBytes } from 'crypto';

dotenv.config();

const logger = pino({ level: process.env.LOG_LEVEL || 'info' });

// –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤/–ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫–∏
const rawToken = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN || '';
const botToken = rawToken.trim();
if (!botToken) {
  logger.error('BOT_TOKEN is required');
  process.exit(1);
}

function buildAgentFromEnv() {
  const proxyUrl = process.env.HTTPS_PROXY || process.env.HTTP_PROXY || process.env.ALL_PROXY || '';
  if (!proxyUrl) return undefined;
  try {
    if (proxyUrl.startsWith('socks')) {
      return new SocksProxyAgent(proxyUrl);
    }
    return new HttpsProxyAgent(proxyUrl);
  } catch (err) {
    logger.warn({ err }, 'Failed to configure proxy agent');
    return undefined;
  }
}

const telegrafOptions = {};
const agent = buildAgentFromEnv();
if (agent) {
  telegrafOptions.telegram = { agent };
}

const bot = new Telegraf(botToken, telegrafOptions);
const mproxy = buildMProxyFromEnv();

// –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
const userState = new Map(); // key: from.id, value: { action, step, data }
const giveaways = new Map(); // id -> { channel, messageId, winnersCount, entries:Set<user_id>, createdBy:number, text:string }

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∏–∑–±–µ–≥–∞–µ–º –¥–ª–∏–Ω–Ω–æ–≥–æ callback_data)
const ephemeralStore = new Map(); // token -> { value, expiresAt }
function putEphemeral(value, ttlMs = 10 * 60 * 1000) {
  const token = randomBytes(8).toString('hex');
  const expiresAt = Date.now() + ttlMs;
  ephemeralStore.set(token, { value, expiresAt });
  setTimeout(() => ephemeralStore.delete(token), ttlMs).unref?.();
  return token;
}
function getEphemeral(token) {
  const entry = ephemeralStore.get(token);
  if (!entry) return undefined;
  if (entry.expiresAt < Date.now()) {
    ephemeralStore.delete(token);
    return undefined;
  }
  return entry.value;
}

function escapeHtml(text) {
  return String(text)
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
    .replaceAll('"', '&quot;');
}

function formatUserLink(user) {
  const id = escapeHtml(user.user_id);
  const nameTextRaw = `${user.first_name || ''} ${user.last_name || ''}`.trim();
  const hasName = Boolean(nameTextRaw);
  const nameText = hasName ? escapeHtml(nameTextRaw) : '';
  if (user.username) {
    const uname = escapeHtml(user.username);
    return `<a href="https://t.me/${uname}">@${uname}</a>`;
  }
  const nameSuffix = hasName ? ` (${nameText})` : '';
  return `<a href="tg://user?id=${id}">id:${id}</a>${nameSuffix}`;
}

bot.start(async (ctx) => {
  await showMainMenu(
    ctx,
    'üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à.\n\n' +
      '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n' +
      '1) –ù–∞–∂–º–∏—Ç–µ ¬´üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤¬ª ‚Äî —É–∫–∞–∂–∏—Ç–µ <b>username –≥—Ä—É–ø–ø—ã</b>. –Ø –ø–æ–∫–∞–∂—É –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n' +
      '2) –ù–∞–∂–º–∏—Ç–µ ¬´üéÅ –†–æ–∑—ã–≥—Ä—ã—à¬ª ‚Äî —É–∫–∞–∂–∏—Ç–µ <b>username –≥—Ä—É–ø–ø—ã</b> –∏ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</b>. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º¬ª.\n\n' +
      '‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–≥—Ä—É–ø–ø—É/–æ–±—Å—É–∂–¥–µ–Ω–∏–µ</b>, –∞ –Ω–µ –∫–∞–Ω–∞–ª‚Äë—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é.'
  );
});

bot.command('ping', async (ctx) => {
  await ctx.reply('pong');
});

bot.command('draw', async (ctx) => {
  if (!mproxy.isEnabled()) {
    return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  }
  const text = ctx.message.text.trim();
  const parts = text.split(/\s+/);
  if (parts.length < 3) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /draw <@channel|id> <–∫–æ–ª-–≤–æ_–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π>');
  }
  const channel = parts[1];
  const winnersCount = Math.max(1, parseInt(parts[2], 10) || 1);
  await ctx.reply(`–°–æ–±–∏—Ä–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ ${channel}...`);
  try {
    const members = await mproxy.fetchMembers(channel, { limit: 100000 });
    const humans = members.filter((m) => !m.is_bot);
    const winners = pickUniqueRandom(humans, winnersCount);
    if (!winners.length) {
      return ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.');
    }
    const list = winners.map((u, i) => `${i + 1}. ${formatUserLink(u)}`).join('\n');
    await ctx.replyWithHTML(`–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n${list}`, { disable_web_page_preview: true });
  } catch (err) {
    return ctx.reply(`–û—à–∏–±–∫–∞ MProxy: ${err.message}`);
  }
});

// –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
bot.action(/msg_winners:.+/, async (ctx) => {
  await ctx.answerCbQuery();
  if (!mproxy.isEnabled()) return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  const token = ctx.match.input.split(':')[1];
  const ids = getEphemeral(token) || [];
  if (!Array.isArray(ids) || ids.length === 0) {
    return ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
  }
  userState.set(ctx.from.id, { action: 'send_msg', step: 1, data: { ids } });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', {
    reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
  });
});

bot.command('whois', async (ctx) => {
  const text = ctx.message.text.trim();
  const parts = text.split(/\s+/);
  if (parts.length < 2) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /whois <user_id|@username>');
  }
  const arg = parts[1];
  if (arg.startsWith('@')) {
    const uname = escapeHtml(arg.slice(1));
    return ctx.replyWithHTML(`–ü—Ä–æ—Ñ–∏–ª—å: <a href="https://t.me/${uname}">@${uname}</a>`, { disable_web_page_preview: true });
  }
  const id = String(arg).replace(/[^0-9]/g, '');
  if (!id) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id');
  return ctx.replyWithHTML(`–ü—Ä–æ—Ñ–∏–ª—å: <a href="tg://user?id=${id}">id:${escapeHtml(id)}</a>`, { disable_web_page_preview: true });
});

// ---------- –ú–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏ ----------
function mainMenuKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data: 'menu_members' },
          { text: 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à', callback_data: 'menu_draw' },
        ],
        [
          { text: 'üìù –†–æ–∑—ã–≥—Ä—ã—à –ø–æ –ø–æ—Å—Ç—É', callback_data: 'menu_draw_post' },
        ],
      ],
    },
  };
}

async function showMainMenu(ctx, text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
  userState.delete(ctx.from.id);
  await ctx.replyWithHTML(text, mainMenuKeyboard());
}

bot.action('menu_main', async (ctx) => {
  await ctx.answerCbQuery();
  await showMainMenu(ctx);
});

bot.action('menu_members', async (ctx) => {
  await ctx.answerCbQuery();
  if (!mproxy.isEnabled()) return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  // –ë–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  userState.set(ctx.from.id, { action: 'ask_target', nextAction: 'members_all', data: {} });
  await ctx.reply('–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ username –≥—Ä—É–ø–ø—ã. –Ø –¥–æ–±–∞–≤–ª—é –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂—É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.', {
    reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
  });
});

bot.action('menu_members_all', async (ctx) => {
  await ctx.answerCbQuery();
  if (!mproxy.isEnabled()) return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  userState.set(ctx.from.id, { action: 'ask_target', nextAction: 'members_all', data: {} });
  await ctx.reply('–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ username –≥—Ä—É–ø–ø—ã. –ü–æ–¥–∫–ª—é—á—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂—É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.', {
    reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
  });
});

bot.action('menu_draw', async (ctx) => {
  await ctx.answerCbQuery();
  // –†–æ–∑—ã–≥—Ä—ã—à –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É (–±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π)
  userState.set(ctx.from.id, { action: 'draw_post', step: 1, data: {} });
  await ctx.reply('–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã, –≥–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
    reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
  });
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
bot.action('menu_draw_post', async (ctx) => {
  await ctx.answerCbQuery();
  userState.set(ctx.from.id, { action: 'draw_post', step: 1, data: {} });
  await ctx.reply('–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã, –≥–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
    reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
  });
});

// –ö–Ω–æ–ø–∫–∏ Whois –≤ –º–µ–Ω—é –Ω–µ—Ç; –∫–æ–º–∞–Ω–¥–∞ /whois –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
bot.on('text', async (ctx, next) => {
  const st = userState.get(ctx.from.id);
  if (!st) return next();
  const text = ctx.message.text.trim();

  try {
    if (st.action === 'ask_target') {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Ü–µ–ª–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      const target = text;
      await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
      const botMe = await ctx.telegram.getMe();
      const clientMe = await mproxy.me().catch(() => null);
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å)
      let botStatus = '–Ω–µ –≤ –∫–∞–Ω–∞–ª–µ';
      try {
        const chat = await ctx.telegram.getChat(target);
        const member = await ctx.telegram.getChatMember(chat.id, botMe.id);
        botStatus = member.status;
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤—Ä—É—á–Ω—É—é
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞
      const clientMember = await mproxy.isMember(target).catch(() => ({ is_member: false }));
      if (!clientMember.is_member) {
        await ctx.reply(`–ö–ª–∏–µ–Ω—Ç ${clientMe?.username ? '@' + clientMe.username : clientMe?.first_name || '–∞–∫–∫–∞—É–Ω—Ç'} –Ω–µ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –¥–æ–±–∞–≤–ª—è—é...`);
        await mproxy.joinTarget(target);
      }
      await ctx.reply(`–°—Ç–∞—Ç—É—Å: –±–æ—Ç=${botStatus}; –∫–ª–∏–µ–Ω—Ç=${clientMember.is_member ? '–≤ –≥—Ä—É–ø–ø–µ' : '–¥–æ–±–∞–≤–ª–µ–Ω'}`);
      if (st.nextAction === 'members') {
        userState.set(ctx.from.id, { action: 'members', step: 1, data: { channel: target } });
        return ctx.reply('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
      }
      if (st.nextAction === 'members_all') {
        const channel = target;
        await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${channel}...`);
        const members = await mproxy.fetchAllMembers(channel, { pageSize: 500, hardMax: 100000 });
        if (!members.length) {
          await ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', mainMenuKeyboard());
        } else {
          const lines = members.map((u, i) => `${i + 1}. ${formatUserLink(u)}`);
          await sendChunkedHtml(ctx, lines);
        }
        return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
      }
      if (st.nextAction === 'draw') {
        userState.set(ctx.from.id, { action: 'draw', step: 2, data: { channel: target } });
        return ctx.reply('–®–∞–≥ 2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ).');
      }
    }

    // –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ –ø–æ—Å—Ç—É
    if (st.action === 'draw_post') {
      if (st.step === 1) {
        st.data.channel = text;
        st.step = 2;
        userState.set(ctx.from.id, st);
        return ctx.reply('–®–∞–≥ 2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ).');
      }
      if (st.step === 2) {
        const num = Math.max(1, parseInt(text, 10) || 1);
        st.data.winnersCount = num;
        st.step = 3;
        userState.set(ctx.from.id, st);
        return ctx.reply('–®–∞–≥ 3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å –∫–Ω–æ–ø–∫–æ–π ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª).');
      }
      if (st.step === 3) {
        const { channel, winnersCount } = st.data;
        const postText = text;
        await ctx.reply('–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ...');
        // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π —É—á–∞—Å—Ç–∏—è
        const giveawayId = randomBytes(8).toString('hex');
        const msg = await ctx.telegram.sendMessage(channel, `${postText}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:`, {
          reply_markup: { inline_keyboard: [[{ text: '‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data: `gwj:${giveawayId}` }]] },
          disable_web_page_preview: true,
        }).catch(async (e) => {
          await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç: ${e.message}`);
          throw e;
        });
        giveaways.set(giveawayId, {
          channel,
          messageId: msg.message_id,
          winnersCount,
          entries: new Set(),
          createdBy: ctx.from.id,
          text: postText,
        });
        const finishToken = putEphemeral({ giveawayId });
        await ctx.reply('–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à.', {
          reply_markup: { inline_keyboard: [[{ text: 'üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: `gwe:${finishToken}` }]] },
        });
        return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ. –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω.');
      }
    }

    if (st.action === 'members') {
      // text: <group> [limit] [offset]
      const parts = text.split(/\s+/);
      const channel = st.data.channel || parts[0];
      const limit = Math.min(Math.max(parseInt(parts[1], 10) || 50, 1), 200);
      const offset = Math.max(parseInt(parts[2], 10) || 0, 0);
      await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${channel} (limit=${limit}, offset=${offset})...`);
      const members = await mproxy.fetchMembers(channel, { limit, offset });
      if (!members.length) {
        await ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', mainMenuKeyboard());
      } else {
        const lines = members.map((u, i) => `${offset + i + 1}. ${formatUserLink(u)}`);
        await sendChunkedHtml(ctx, lines);
      }
      return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
    }

    if (st.action === 'members_all') {
      const channel = text;
      await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${channel}...`);
      const members = await mproxy.fetchAllMembers(channel, { pageSize: 500, hardMax: 100000 });
      if (!members.length) {
        await ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', mainMenuKeyboard());
      } else {
        const lines = members.map((u, i) => `${i + 1}. ${formatUserLink(u)}`);
        await sendChunkedHtml(ctx, lines);
      }
      return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
    }

    if (st.action === 'draw') {
      if (st.step === 1) {
        st.data.channel = text;
        st.step = 2;
        userState.set(ctx.from.id, st);
        return ctx.reply('–®–∞–≥ 2/2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ).', {
          reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'menu_main' }]] },
        });
      }
      if (st.step === 2) {
        const winnersCount = Math.max(1, parseInt(text, 10) || 1);
        const channel = st.data.channel;
        await ctx.reply(`–°–æ–±–∏—Ä–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ ${channel}...`);
        const members = await mproxy.fetchMembers(channel, { limit: 100000 });
        const humans = members.filter((m) => !m.is_bot);
        const winners = pickUniqueRandom(humans, winnersCount);
        if (!winners.length) {
          await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', mainMenuKeyboard());
        } else {
          const list = winners.map((u, i) => `${i + 1}. ${formatUserLink(u)}`);
          const winnersIds = winners.map((u) => u.user_id);
          const token = putEphemeral(winnersIds);
          await ctx.replyWithHTML(`–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n${list.join('\n')}`, {
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º', callback_data: `msg_winners:${token}` }]],
            },
          });
        }
        return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
      }
    }

    if (st.action === 'whois') {
      if (text.startsWith('@')) {
        const uname = escapeHtml(text.slice(1));
        await ctx.replyWithHTML(`–ü—Ä–æ—Ñ–∏–ª—å: <a href="https://t.me/${uname}">@${uname}</a>`, { disable_web_page_preview: true });
      } else {
        const id = String(text).replace(/[^0-9]/g, '');
        if (!id) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù—É–∂–µ–Ω @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π id.');
        await ctx.replyWithHTML(`–ü—Ä–æ—Ñ–∏–ª—å: <a href="tg://user?id=${id}">id:${escapeHtml(id)}</a>`, { disable_web_page_preview: true });
      }
      return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
    }

    if (st.action === 'send_msg') {
      const ids = st.data.ids || [];
      const textMessage = text;
      await ctx.reply('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º...');
      const result = await mproxy.sendMessages(ids, textMessage);
      await ctx.reply(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}/${result.total}`);
      return showMainMenu(ctx, '–ì–æ—Ç–æ–≤–æ.');
    }
  } catch (err) {
    await ctx.reply(`–û—à–∏–±–∫–∞: ${err.message}`, mainMenuKeyboard());
    return showMainMenu(ctx);
  }

  return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –Ω–∞ –ø–æ—Å—Ç–µ
bot.action(/gwj:.+/, async (ctx) => {
  const id = ctx.match.input.split(':')[1];
  const g = giveaways.get(id);
  if (!g) {
    return ctx.answerCbQuery('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω', { show_alert: true });
  }
  g.entries.add(String(ctx.from.id));
  return ctx.answerCbQuery('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!', { show_alert: false });
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
bot.action(/gwe:.+/, async (ctx) => {
  await ctx.answerCbQuery();
  const token = ctx.match.input.split(':')[1];
  const data = getEphemeral(token);
  if (!data) return ctx.reply('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.');
  const { giveawayId } = data;
  const g = giveaways.get(giveawayId);
  if (!g) return ctx.reply('–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.');
  const participants = Array.from(g.entries).map((id) => ({ user_id: id }));
  const winners = pickUniqueRandom(participants, g.winnersCount);
  const list = winners.map((u, i) => `${i + 1}. ${formatUserLink(u)}`).join('\n');
  await ctx.telegram.sendMessage(g.channel, `–ò—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ ${g.messageId}):\n${list}`, { disable_web_page_preview: true });
  const ids = winners.map((u) => u.user_id);
  const msgToken = putEphemeral(ids);
  await ctx.reply('–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω.', {
    reply_markup: { inline_keyboard: [[{ text: '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º', callback_data: `msg_winners:${msgToken}` }]] },
  });
  giveaways.delete(giveawayId);
});

async function sendChunkedHtml(ctx, lines) {
  const chunks = [];
  let current = [];
  let len = 0;
  for (const line of lines) {
    if (len + line.length + 1 > 3500) {
      chunks.push(current.join('\n'));
      current = [];
      len = 0;
    }
    current.push(line);
    len += line.length + 1;
  }
  if (current.length) chunks.push(current.join('\n'));
  for (const chunk of chunks) {
    // eslint-disable-next-line no-await-in-loop
    await ctx.replyWithHTML(chunk, { disable_web_page_preview: true });
  }
}

bot.command('members', async (ctx) => {
  if (!mproxy.isEnabled()) {
    return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  }
  const text = ctx.message.text.trim();
  const parts = text.split(/\s+/);
  if (parts.length < 2) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /members <@group|id> [limit] [offset]');
  }
  const channel = parts[1];
  const limit = Math.min(Math.max(parseInt(parts[2], 10) || 50, 1), 200);
  const offset = Math.max(parseInt(parts[3], 10) || 0, 0);
  await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${channel} (limit=${limit}, offset=${offset})...`);
  try {
    const members = await mproxy.fetchMembers(channel, { limit, offset });
    if (!members.length) {
      return ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    const lines = members.map((u, i) => `${offset + i + 1}. ${formatUserLink(u)}`);
    const chunks = [];
    let current = [];
    let len = 0;
    for (const line of lines) {
      if (len + line.length + 1 > 3500) {
        chunks.push(current.join('\n'));
        current = [];
        len = 0;
      }
      current.push(line);
      len += line.length + 1;
    }
    if (current.length) chunks.push(current.join('\n'));
    for (const chunk of chunks) {
      // eslint-disable-next-line no-await-in-loop
      await ctx.replyWithHTML(chunk, { disable_web_page_preview: true });
    }
  } catch (err) {
    return ctx.reply(`–û—à–∏–±–∫–∞ MProxy: ${err.message}`);
  }
});

bot.command('members_all', async (ctx) => {
  if (!mproxy.isEnabled()) {
    return ctx.reply('MTProto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MProxy.');
  }
  const text = ctx.message.text.trim();
  const parts = text.split(/\s+/);
  if (parts.length < 2) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /members_all <@group|id>');
  }
  const channel = parts[1];
  await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${channel} (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...`);
  try {
    const members = await mproxy.fetchAllMembers(channel, { pageSize: 500, hardMax: 100000 });
    if (!members.length) {
      return ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    const lines = members.map((u, i) => `${i + 1}. ${formatUserLink(u)}`);
    const chunks = [];
    let current = [];
    let len = 0;
    for (const line of lines) {
      if (len + line.length + 1 > 3500) {
        chunks.push(current.join('\n'));
        current = [];
        len = 0;
      }
      current.push(line);
      len += line.length + 1;
    }
    if (current.length) chunks.push(current.join('\n'));
    for (const chunk of chunks) {
      // eslint-disable-next-line no-await-in-loop
      await ctx.replyWithHTML(chunk, { disable_web_page_preview: true });
    }
  } catch (err) {
    return ctx.reply(`–û—à–∏–±–∫–∞ MProxy: ${err.message}`);
  }
});

bot.catch((err, ctx) => {
  logger.error({ err }, 'Bot error');
});

async function launch() {
  logger.info('Launching bot...');

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ MProxy —Å –≥–∏–±–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π —Ñ–ª–∞–≥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ –±–æ—Ç–∞
  const rawFlag = (process.env.ENABLE_MPROXY || '').trim().toLowerCase();
  const normalizedFlag = rawFlag.replace(/^["']|["']$/g, '');
  const enableMproxy = ['true', '1', 'yes', 'on'].includes(normalizedFlag);
  if (enableMproxy) {
    logger.info('ENABLE_MPROXY is true; starting embedded MProxy server');
    startMProxyServer();
  } else {
    logger.info({ ENABLE_MPROXY: process.env.ENABLE_MPROXY }, 'Embedded MProxy disabled');
  }

  await bot.launch();
  logger.info('Bot launched');

  const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
  for (const signal of signals) {
    process.once(signal, async () => {
      logger.info({ signal }, 'Shutting down');
      await bot.stop('graceful-stop');
      process.exit(0);
    });
  }
}

launch().catch((err) => {
  logger.error({ err }, 'Failed to launch bot');
  process.exit(1);
});


