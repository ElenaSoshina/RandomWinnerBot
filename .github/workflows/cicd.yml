name: CI/CD

on:
  push:
    branches: ["**"]
  pull_request:

concurrency:
  group: deploy
  cancel-in-progress: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/random-winner-bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            docker login docker.io -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/random-winner-bot:latest
            docker pull "$IMAGE"
            # Останавливаем и удаляем старый контейнер, если есть
            if [ "$(docker ps -aq -f name=^random-winner-bot$)" ]; then
              docker rm -f random-winner-bot || true
            fi
            # Запускаем новый контейнер без каких-либо файлов на сервере
            docker run -d \
              --name random-winner-bot \
              --restart unless-stopped \
              -e BOT_TOKEN='${{ secrets.BOT_TOKEN }}' \
              -e LOG_LEVEL='info' \
              -e ENABLE_MPROXY='${{ secrets.ENABLE_MPROXY }}' \
              -e TG_API_ID='${{ secrets.TG_API_ID }}' \
              -e TG_API_HASH='${{ secrets.TG_API_HASH }}' \
              -e TG_SESSION='${{ secrets.TG_SESSION }}' \
              -e MPROXY_TOKEN='${{ secrets.MPROXY_TOKEN }}' \
              -e MPROXY_BASE_URL='http://127.0.0.1:8081' \
              -e MPROXY_PORT='8081' \
              "$IMAGE"
            docker image prune -f


